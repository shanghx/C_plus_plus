//这个程序实现了功能！
/*要求完成以下功能：
1．问题：农夫、狐狸、鸡和小米过河问题。
农夫、狐狸、鸡和小米开始在河的左岸，要全部过到右岸去。
有一小船，过河时，除农夫外，船上至多能载狐狸、鸡和小米中的一样。
狐狸要吃鸡，鸡吃小米，除非农夫在那里。
试规划一条安全过河的计划，用C++实现，并最终输出结果。
2．要求：
  1）以状态表示过河情况。
  2）过河动作改变在河左岸右岸状态。*/ 
#include <iostream>
//#include <string.h>
#define STEP 20
using namespace std;
	class farmer
{
	private:
	int a[STEP][4];
	int b[STEP];
	static int count;
	public:
	farmer();
	void disp(int s,int n);
	void take(int step);
};

int farmer::count=0;
farmer::farmer()
{
	int i,j;
 	for(i=0;i<STEP;i++)
 	{  b[i]=0;            //存放编号   0代表狐狸，1代表鸡，2代表小米 3代表农夫 
	for(j=0;j<4;j++)
	a[i][j]=0;                       //存放各成员的位置   0代表左岸  1代表右岸 
 	}
}
void farmer::disp(int s,int n)
{  
     if(s==0)
 {
if(n==0) cout<<"-----农夫自己过去----->";
     else if(n==1) cout<<"-----把狐狸送过去---->";
           else if(n==2) cout<<"-----把鸡送过去------>";
            else if(n==3) cout<<"-----把小米送过去---->";
cout<<endl<<endl;
 }
 else
 {
if(n==0) cout<<"<-----农夫自己回------";
      else if(n==1) cout<<"<----把狐狸送回来-----";
            else if(n==2) cout<<"<-----把鸡送回来------";
             else if(n==3) cout<<"<----把小米送回来-----";
        cout<<endl<<endl;
 }
}
void farmer::take(int step)                //渡河次数 
{ 
	int i; 
	if (a[step][0] + a[step][1] + a[step][2] + a[step][3] == 4) 
	{  ++count;cout<<endl<<endl<<"       \t\t\t\t\t\t\t\t\t\t\t第"<<count<<"种方法"<<endl<<endl;
		cout<<"\t\t\t\t\t\t\t左岸：农夫 狐狸 鸡  小米\t\t\t\t\t右岸：none"<<endl<<endl;
	i=0;
    
     for(i=1;i<=step;i++)
	{cout<<endl;cout<<"\t\t\t\t\t\t\t\t\t\t第"<<i<<"步骤:";disp(a[i-1][3],b[i-1]+1); 
{
	cout<<"\t\t\t\t\t\t\t左岸: ";
	if(a[i][0]==0) cout<<"狐狸 "; 
	     if(a[i][1]==0) cout<<"鸡 ";  
		  if(a[i][2]==0) cout<<" 小米 "; 
		     if(a[i][3]==0) cout<<"农夫 "; 
 if(a[i][0]&&a[i][1]&&a[i][2]&&a[i][3]) cout<<"无";   
 
    cout<<"\t\t\t\t\t     右岸: ";;    
	 if(a[i][0]==1) cout<<"狐狸 "; 
	    if(a[i][1]==1) cout<<"鸡 ";  
		  if(a[i][2]==1) cout<<"小米 "; 
		     if(a[i][3]==1) cout<<"农夫 ";   
			   if(!(a[i][0]||a[i][1]||a[i][2]||a[i][3])) cout<<"无<<endl"; } 	 cout<<endl<<endl;
	 }
      cout<<endl; 
      return; 
} 
 	for (i = 0; i < step; i++) 
 	
 	if(a[i][0]== a[step][0]&&a[i][1]==a[step][1]&&a[i][2]==a[step][2]&&a[i][3]==a[step][3])
	return ; 
 	if (a[step][1] != a[step][3] &&(a[step][2] == a[step][1] || a[step][0] == a[step][1]))    //判断狐狸和鸡、鸡和小米是否在一起
		return ; 
	for (i = -1; i <= 2; i++) 
	{ 
	b[step] = i; 
  	
	a[step+1][0]= a[step][0];a[step+1][1]=a[step][1];a[step+1][2]=a[step][2];a[step+1][3]=a[step][3];
  	 a[step + 1][3] = 1 - a[step + 1][3]; 
    if (i == -1) 
 	take(step + 1);  
       else if (a[step][i] == a[step][3])
  { 
  a[step + 1][i] = a[step + 1][3]; 
  take(step + 1);
  } 
	} 
}	
int main()
{
	cout<<"\t\t\t\t\t*************************************************农夫过河问题*************************************************"<<endl;
	cout<<"\t\t\t\t\t**                                                                                                          **"<<endl;
	cout<<"\t\t\t\t\t**成员：农夫、狐狸、鸡、小米                                                                                **"<<endl;
	cout<<"\t\t\t\t\t**                                                                                                          **"<<endl; 
	cout<<"\t\t\t\t\t**                                                                                               尚航行     **"<<endl; 
	
	cout<<"\t\t\t\t\t*************************************************农夫过河问题*************************************************"<<endl<<endl;
	cout<<"\t\t\t\t\t*************************************************解决方案如下*************************************************"<<endl<<endl;
	farmer A;
    A.take(0);
    return 0;
}

